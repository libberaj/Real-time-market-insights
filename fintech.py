# -*- coding: utf-8 -*-
"""fintech.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k717rIm2PSgkgsgna1WWdS14pJ59ODA2
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install pydot
!pip install graphviz
!pip install tensorflow
import pandas as pd
# %matplotlib inline
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from sklearn.preprocessing import MinMaxScaler
from keras.layers import LSTM, Dense, Dropout
from sklearn.model_selection import TimeSeriesSplit
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import MinMaxScaler
from sklearn import linear_model
from keras.models import Sequential, load_model
from keras.layers import LSTM
import keras.backend as K
from keras.callbacks import EarlyStopping
from keras.optimizers import Adam
from tensorflow.keras.utils import plot_model

df=pd.read_csv("microsoft_stocks.csv",na_values=['null'],index_col='Date',parse_dates=True,infer_datetime_format=True)
df.head()

print("Dataframe Shape: ", df.shape)
print("Null Value Present: ", df.isnull().values.any())

df['Adj Close'].plot()

output_var = pd.DataFrame(df['Adj Close'])
#Selecting the Features
features = ['Open', 'High', 'Low', 'Volume']

scaler = MinMaxScaler()
feature_transform = scaler.fit_transform(df[features])
feature_transform= pd.DataFrame(columns=features, data=feature_transform, index=df.index)
feature_transform.head()

timesplit= TimeSeriesSplit(n_splits=10)
for train_index, test_index in timesplit.split(feature_transform):
        X_train, X_test = feature_transform[:len(train_index)], feature_transform[len(train_index): (len(train_index)+len(test_index))]
        y_train, y_test = output_var[:len(train_index)].values.ravel(), output_var[len(train_index): (len(train_index)+len(test_index))].values.ravel()

import numpy as np

trainX =np.array(X_train)
testX =np.array(X_test)
print("Original shapes - Train:", trainX.shape, "Test:", testX.shape)

X_train = trainX.reshape(trainX.shape[0], 1, -1)

# Reshape the test set
X_test = testX.reshape(testX.shape[0], 1, -1)

# Print the shape of the reshaped data for verification
print("Reshaped shapes - Train:", X_train.shape, "Test:", X_test.shape)

#Building the LSTM Model
lstm = Sequential()
lstm.add(LSTM(32, input_shape=(1, X_train.shape[2]), activation='relu', return_sequences=False))
lstm.add(Dense(1))
lstm.compile(loss='mean_squared_error', optimizer='adam')
plot_model(lstm, show_shapes=True, show_layer_names=True)

history=lstm.fit(X_train, y_train, epochs=100, batch_size=8, verbose=1, shuffle=False)

y_pred= lstm.predict(X_test)

#Predicted vs True Adj Close Value â€“ LSTM
plt.plot(y_test, label='True Value')
import matplotlib.pyplot as plt

plt.plot(y_pred, label='LSTM Value')
plt.title("Prediction by LSTM")
plt.xlabel('Time Scale')
plt.ylabel('Scaled USD')
plt.legend()
plt.show()